<?xml version="1.0"?>
<project name="JDFEditor" default="dist" basedir=".">
	<description>Build the JDFEditor.</description>
	<!-- Initializes -->
	<target name="-init" description="Initializes the build. This task is
        automatically run before building.">
		<echo>Initializing. Using build settings from ./build.properties...</echo>
		<echo>Make sure you have the JAR files listed in lib/DEPENDENCIES.txt</echo>
		<!-- Sets properties -->
		<tstamp />
		<property file="version.properties" description="Contains major/minor version info" />
		<property name="src.dir" value="./src" />
		<property name="java.src.dir" value="${src.dir}/java" />
		<property name="test.src.dir" value="${src.dir}/test" />
		<property name="lib.dir" value="./lib" />
		<property name="bin.dir" value="./bin" />
		<property name="dist.dir" value="./dist" />
		<property name="build.debug" value="true" />
		<property name="base.filename" value="jdfeditor-${major.version}.${minor.version}" />
		<property name="jar.filename" value="jdfeditor.jar" />
		<property name="dist.bin.dir" value="${dist.dir}/${base.filename}-bin" />
		<property name="dist.src.dir" value="${dist.dir}/${base.filename}-src" />
		<property name="verbose" value="true" />
		<!-- Sets class path -->
		<path id="project.class.path">
			<pathelement path="${java.class.path}" />
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
		<!-- Creates directories -->
		<mkdir dir="${bin.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>
	<target name="compile" depends="-init" description="Compiles the JDFEditor
        source code.">
		<echo>Compiling...</echo>
		<javac destdir="${bin.dir}" debug="${build.debug}" target="1.4" source="1.4" >
			<src path="${java.src.dir}" />
			<classpath refid="project.class.path" />
			<include name="**/*.java" />
		</javac>
		<copy todir="${bin.dir}">
			<fileset dir="${java.src.dir}" includes="org/cip4/jdfeditor/icons/*.*"/>
		</copy>
		<native2ascii encoding="UTF-8" reverse="false" src="${java.src.dir}/org/cip4/jdfeditor/messages" 
			includes="*.properties" dest="${bin.dir}/org/cip4/jdfeditor/messages"/>
	</target>
	<target name="jar" depends="compile">
		<jar destfile="${dist.dir}/${jar.filename}" basedir="${bin.dir}">
			<manifest>
				<attribute name="Main-Class" value="org.cip4.jdfeditor.Editor" />
				<attribute name="Bundle-Name" value="JDF Editor ${major.version}.${minor.version}.${build.number}" />
				<attribute name="Bundle-Vendor" value="CIP4" />
			</manifest>
		</jar>
	</target>
	<target name="clean" depends="-init" description="Cleans the build.">
		<echo>Cleaning...</echo>
		<delete dir="${bin.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${bin.dir}" />
	</target>
	<target name="dist" depends="srcdist,bindist" />
	<target name="bindist" depends="jar" description="Builds a binary distribution of
        JDFEditor.">
		<echo>Building JDFEditor binary distribution...</echo>
		<!-- Create dist directories -->
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.bin.dir}" />
		<mkdir dir="${dist.bin.dir}/bin" />
		<mkdir dir="${dist.bin.dir}/lib" />
		<!-- Copy files to dist directories -->
		<copy todir="${dist.bin.dir}/bin">
			<fileset dir="${src.dir}/bin">
				<include name="jdfeditor.bat" />
				<include name="jdfeditor.sh" />
			</fileset>
		</copy>
		<copy todir="${dist.bin.dir}/lib">
			<fileset file="${dist.dir}/${jar.filename}" />
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<include name="**/*.license" />
			</fileset>
		</copy>
		<copy file="src/README.txt" todir="${dist.bin.dir}" />
		<copy file="src/LICENSE.txt" todir="${dist.bin.dir}" />
		<buildnumber />
		<replace file="${dist.bin.dir}/README.txt">
			<replacefilter token="@build.version@" value="${major.version}.${minor.version}.${build.number}" />
			<replacefilter token="@build.timestamp@" value="${DSTAMP}" />
		</replace>
		<fixcrlf srcdir="${dist.bin.dir}" eol="dos" includes="README.txt" />
		<fixcrlf srcdir="${dist.bin.dir}/bin" eol="dos" includes="**/*.bat" />
		<fixcrlf srcdir="${dist.bin.dir}/bin" eol="unix" includes="**/*.sh" />
		<chmod dir="${dist.bin.dir}" perm="ugo+rx" includes="**/*.sh" />
		<zip destfile="${dist.dir}/${base.filename}-bin.zip" basedir="${dist.bin.dir}">
			<zipfileset dir="bin" excludes="*.sh" />
			<zipfileset dir="bin" includes="*.sh" filemode="755" />
		</zip>
		<antcall target="appledist" />
		<antcall target="windist" />
	</target>
	<target name="srcdist" depends="compile" description="Builds a source distribution of
		        Alces.">
		<echo>Building JDFEditor source distribution...</echo>
		<!-- Create dist directories -->
		<mkdir dir="${dist.src.dir}" />
		<copy todir="${dist.src.dir}">
			<fileset dir="." includes="lib/DEPENDENCIES.txt"/>
		</copy>
		<copy todir="${dist.src.dir}">
			<fileset dir=".">
				<include name="src/**/*" />
				<include name="build.xml" />
			</fileset>
		</copy>
		<copy file="src/README.txt" todir="${dist.src.dir}" />
		<copy file="src/LICENSE.txt" todir="${dist.src.dir}" />
		<buildnumber />
		<replace file="${dist.src.dir}/README.txt">
			<replacefilter token="@build.version@" value="${major.version}.${minor.version}.${build.number}" />
			<replacefilter token="@build.timestamp@" value="${DSTAMP}" />
		</replace>
		<fixcrlf srcdir="${dist.src.dir}" eol="dos" includes="README.txt" />
		<fixcrlf srcdir="${dist.src.dir}/src/bin" eol="dos" includes="**/*.bat" />
		<fixcrlf srcdir="${dist.src.dir}/src/bin" eol="unix" includes="**/*.sh" />
		<chmod dir="${dist.src.dir}/src" perm="ugo+rx" includes="**/*.sh" />
		<zip destfile="${dist.dir}/${base.filename}-src.zip" basedir="${dist.src.dir}" />
	</target>
	<target name="test" description="Runs JUnit tests." depends="compile">
		<property name="test.bin.dir" value="${bin.dir}/test" />
		<mkdir dir="${test.bin.dir}" />
		<property name="test.reports.dir" value="${bin.dir}/test-reports" />
		<mkdir dir="${test.reports.dir}" />
		<!-- Compile test cases -->
		<echo>Compiling unit tests...</echo>
		<javac destdir="${test.bin.dir}" debug="${build.debug}" target="1.4" source="1.4">
			<src path="${test.src.dir}" />
			<classpath refid="project.class.path" />
			<classpath path="${bin.dir}" />
			<include name="**/*" />
		</javac>
		<!-- Run test cases -->
		<echo>Running unit tests...</echo>
		<junit fork="no" timeout="120000" dir="${test.src.dir}" tempdir="${test.bin.dir}" failureproperty="test.failure" errorproperty="test.error">
			<formatter type="plain" />
			<formatter type="xml" />
			<classpath>
				<pathelement path="${java.class.path}" />
				<fileset dir="${lib.dir}">
					<include name="**/*.jar" />
				</fileset>
				<pathelement path="${bin.dir}" />
				<pathelement path="${test.bin.dir}" />
				<pathelement path="${test.src.dir}/data" />
			</classpath>
			<batchtest fork="yes" todir="${test.reports.dir}">
				<fileset dir="${test.bin.dir}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
		<echo>Tests reports have been written to: ${test.reports.dir}</echo>
	</target>
	<!-- Windows application -->
	<target name="windist" depends="-init">
		<property name="win.dist.bin.dir" value="${dist.dir}/${base.filename}-win" />
		<copy todir="${win.dist.bin.dir}">
			<fileset dir="${dist.bin.dir}">
				<exclude name="bin" />
				<exclude name="bin/**/*" />
			</fileset>
		</copy>
		<copy file="${src.dir}/bin/windows/JDF Editor.exe" todir="${win.dist.bin.dir}" />
		<zip destfile="${win.dist.bin.dir}.zip">
			<zipfileset dir="${win.dist.bin.dir}" prefix="${base.filename}-win" />
		</zip>
	</target>
	<target name="windist-compile" depends="bindist" description="This target is only need if the EXE file needs to be recompiled.">
		<property name="win.dist.bin.dir" value="${dist.dir}/${base.filename}-win" />
		<echo>Loading JSmooth Ant tasks. Make sure you have installed http://jsmooth.sourceforge.net in ANT_HOME/lib</echo>
		<taskdef name="jsmoothgen" classname="net.charabia.jsmoothgen.ant.JSmoothGen" />
		<copy file="${src.dir}/bin/windows/JDFEditor.jsmooth" todir="${win.dist.bin.dir}" />
		<jsmoothgen project="${win.dist.bin.dir}/JDFEditor.jsmooth" skeletonroot="${src.dir}/bin/windows/skeletons" />
		<delete file="${win.dist.bin.dir}/JDFEditor.jsmooth" />
	</target>
	<!-- For special app bundle on the Mac -->
	<target name="appledist" description="Assembles stand alone Macintosh Bundle. Must build on a Mac (>= 10.2).">
		<echo>Building Mac OS X application bundle...</echo>
		<echo>Loading JarBundler Ant tasks. Make sure you have installed http://informagen.com/JarBundler/ in ANT_HOME/lib</echo>
		<taskdef name="jarbundler" classname="net.sourceforge.jarbundler.JarBundler" />
		<jarbundler dir="${dist.dir}" name="JDF Editor" mainclass="org.cip4.jdfeditor.Editor" bundleid="org.cip4.jdfeditor.Editor" jvmversion="1.4+" shortname="CIP4 JDF Editor" infostring="CIP4 JDF Editor" signature="JDFE" version="${major.version}.${minor.version}.${build.number}" icon="${src.dir}/bin/macosx/icons/JDFEditor.icns" vmoptions="-Xmx256m" stubfile="${src.dir}/bin/macosx/JavaApplicationStub">
			<jarfileset dir="${lib.dir}">
				<include name="*.jar" />
			</jarfileset>
			<jarfileset dir="${dist.dir}/">
				<include name="${jar.filename}" />
			</jarfileset>
			<javaproperty name="apple.laf.useScreenMenuBar" value="true" />
			<documenttype name="JDF Job Ticket" extensions="jdf JDF" mimetypes="application/vnd.cip4-jdf+xml" iconFile="${src.dir}/bin/macosx/icons/JDF.icns" role="Editor" />
			<documenttype name="JMF Message" extensions="jmf JMF" mimetypes="application/vnd.cip4-jmf+xml" iconFile="${src.dir}/bin/macosx/icons/JMF.icns" role="Editor" />
			<documenttype name="XML Document" extensions="xml XML" mimetypes="text/xml" role="Editor" />
		</jarbundler>
		<zip destfile="${dist.dir}/${base.filename}-mac.zip">
			<zipfileset dir="${dist.dir}/JDF Editor.app" prefix="JDF Editor.app/" />
			<zipfileset dir="${dist.dir}/JDF Editor.app" includes="Contents/MacOS/JavaApplicationStub" filemode="755" prefix="JDF Editor.app" />
		</zip>
	</target>
	<target name="dmgappledist" depends="appledist" description="Creates Disk Image for Apple Dist. Must build on a Mac (>= 10.2).">
		<echo>Package appledist</echo>
		<exec executable="hdiutil" spawn="false">
			<arg value="create" />
			<arg value="-srcfolder" />
			<arg value="${bundle.dir}" />
			<arg value="-volname" />
			<arg value="Alces" />
			<arg value="${dist.dir}/bin/Alces.dmg" />
		</exec>
	</target>
</project>
