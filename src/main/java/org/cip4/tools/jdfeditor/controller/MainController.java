package org.cip4.tools.jdfeditor.controller;

import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.URI;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.cip4.jdflib.core.JDFVersion;
import org.cip4.tools.jdfeditor.Editor;
import org.cip4.tools.jdfeditor.model.enumeration.SettingKey;
import org.cip4.tools.jdfeditor.service.SettingService;
import org.cip4.tools.jdfeditor.util.BuildPropsUtil;
import org.cip4.tools.jdfeditor.view.MainView;

/**
 * The Main Controller class.
 */
public class MainController implements ActionListener
{

	private static final Log LOGGER = LogFactory.getLog(MainController.class);

	public static final String ACTION_ONLINE_HELP = "actionOnlineHelp";

	public static final String ACTION_INFO = "actionInfo";

	private final SettingService settingService = SettingService.getSettingService();

	private final MainView mainView;

	/**
	 * Default constructor.
	 */
	public MainController()
	{
		mainView = new MainView();
		init();
	}

	/**
	 * Initializes the MainController class. This method is called by the Spring Framework after construction.
	 */
	public void init()
	{
		mainView.registerController(this);
	}

	/**
	 * Display the main form.
	 * @param file The file to be shown after application start.
	 */
	public void displayForm(File file)
	{

		// display main view
		mainView.display(file);
	}

	/**
	 * Get a typed setting value by key.
	 * @param key The key of the setting value.
	 * @param clazz The type of the setting value.
	 * @return The typed setting value.
	 */
	public <T> T getSetting(SettingKey key, Class<T> clazz)
	{
		return settingService.getSetting(key, clazz);
	}

	/**
	 * Set a setting value by a key.
	 * @param key   The configuration key.
	 * @param value The configuration setting value as String.
	 */
	public void setSetting(SettingKey key, Object value)
	{
		settingService.setSetting(key, value);
	}

	/**
	 * ActionListner for defined actions.
	 * @param e The ActionEvent generated by the calling object.
	 */
	@Override
	public void actionPerformed(ActionEvent e)
	{

		// analyze action command
		switch (e.getActionCommand())
		{

		case ACTION_ONLINE_HELP:
			openOnlineHelp();
			break;

		case ACTION_INFO:
			showInfo();
			break;

		default:
			LOGGER.warn(String.format("ActionCommand '%s' is unknown.", e.getActionCommand()));
			break;
		}
	}

	/**
	 * Open the JDF Editor online help or if not possible show a message box with the URL.
	 */
	private void openOnlineHelp()
	{

		LOGGER.info("Display Online Help.");

		// define url
		String url = "http://cip4.org/jdfeditor";

		// open in browser (if possible)
		if (Desktop.isDesktopSupported())
		{
			try
			{
				Desktop.getDesktop().browse(new URI(url));

			}
			catch (Exception ex)
			{
				LOGGER.error("Error opening Online Help.", ex);
			}
		}
		else
		{
			String msg = "see " + url;
			String title = "Online Help";

			mainView.showMessageDialog(msg, title);
		}
	}

	/**
	 * Show JDF Editor Info Dialog.
	 */
	private void showInfo()
	{

		LOGGER.info("Show Info Window.");

		Editor editor = Editor.getEditor();

        String msg = String.format(
                "%s\n" +
                "%s (%s)\n\n" +
                "%s\n" +
                "%s (%s)",
                BuildPropsUtil.getAppName(),
                BuildPropsUtil.getAppVersion(),
                BuildPropsUtil.getBuildDate(),
                JDFVersion.LIB_NAME,
                JDFVersion.LIB_VERSION,
                JDFVersion.LIB_RELEASE_DATE
        );

		String title = "Version";

		mainView.showMessageDialog(msg, title);
	}
}
