package org.cip4.tools.jdfeditor.controller;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.cip4.jdflib.core.JDFVersion;
import org.cip4.tools.jdfeditor.App;
import org.cip4.tools.jdfeditor.model.enumeration.SettingKey;
import org.cip4.tools.jdfeditor.service.SettingService;
import org.cip4.tools.jdfeditor.view.MainView;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import javax.annotation.PostConstruct;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.URI;

/**
 * The Main Controller class.
 */
@Controller
public class MainController implements ActionListener {

    private static final Logger LOGGER = LogManager.getLogger(MainController.class.getName());

    public static final String ACTION_ONLINE_HELP = "actionOnlineHelp";

    public static final String ACTION_INFO = "actionInfo";

    @Autowired
    private SettingService settingService;

    @Autowired
    private MainView mainView;

    /**
     * Default constructor.
     */
    public MainController() {
    }


    /**
     * Initializes the MainController class. This method is called by the Spring Framework after construction.
     */
    @PostConstruct
    public void init() {
        this.mainView.registerController(this);
    }

    /**
     * Display the main form.
     * @param file The file to be shown after application start.
     */
    public void displayForm(File file) {

        // display main view
        mainView.display(file);
    }

    /**
     * Get a typed setting value by key.
     * @param key The key of the setting value.
     * @param clazz The type of the setting value.
     * @return The typed setting value.
     */
    public <T> T getSetting(SettingKey key, Class<T> clazz) {
        return settingService.getSetting(key, clazz);
    }

    /**
     * Set a setting value by a key.
     * @param key   The configuration key.
     * @param value The configuration setting value as String.
     */
    public void setSetting(SettingKey key, Object value) {
        settingService.setSetting(key, value);
    }

    /**
     * ActionListner for defined actions.
     * @param e The ActionEvent generated by the calling object.
     */
    @Override
    public void actionPerformed(ActionEvent e) {

        // analyze action command
        switch (e.getActionCommand()) {

            case ACTION_ONLINE_HELP:
                openOnlineHelp();
                break;

            case ACTION_INFO:
                showInfo();
                break;

            default:
                LOGGER.warn(String.format("ActionCommand '%s' is unknown.", e.getActionCommand()));
                break;
        }
    }

    /**
     * Open the JDF Editor online help or if not possible show a message box with the URL.
     */
    private void openOnlineHelp() {

        LOGGER.info("Display Online Help.");

        // define url
        String url = "http://cip4.org/jdfeditor";

        // open in browser (if possible)
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().browse(new URI(url));

            } catch (Exception ex) {
                LOGGER.error("Error opening Online Help.", ex);
            }
        } else {
            String msg = "see " + url;
            String title = "Online Help";

            mainView.showMessageDialog(msg, title);
        }
    }

    /**
     * Show JDF Editor Info Dialog.
     */
    private void showInfo() {

        LOGGER.info("Show Info Window.");

        String msg = App.APP_NAME + "\n" + App.APP_VERSION + " (" + App.APP_RELEASE_DATE + ")\n\n" + JDFVersion.LIB_NAME + " (" + JDFVersion.LIB_ARTIFACT_ID + ")\n" + JDFVersion.LIB_VERSION + " (" + JDFVersion.LIB_RELEASE_DATE + ")";
        String title = "Version";

        mainView.showMessageDialog(msg, title);
    }
}
